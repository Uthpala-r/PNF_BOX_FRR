{"$message_type":"diagnostic","message":"unused import: `Command`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cliconfig.rs","byte_start":150,"byte_end":157,"line_start":4,"line_end":4,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":28,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/cliconfig.rs","byte_start":148,"byte_end":157,"line_start":4,"line_end":4,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cliconfig.rs","byte_start":143,"byte_end":144,"line_start":4,"line_end":4,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cliconfig.rs","byte_start":157,"byte_end":158,"line_start":4,"line_end":4,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Command`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cliconfig.rs:4:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::execute::{Mode, Command};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Command` and `get_mode_commands`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/walkup.rs","byte_start":278,"byte_end":285,"line_start":7,"line_end":7,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command, get_mode_commands};","highlight_start":28,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/walkup.rs","byte_start":287,"byte_end":304,"line_start":7,"line_end":7,"column_start":37,"column_end":54,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command, get_mode_commands};","highlight_start":37,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/walkup.rs","byte_start":276,"byte_end":304,"line_start":7,"line_end":7,"column_start":26,"column_end":54,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command, get_mode_commands};","highlight_start":26,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/walkup.rs","byte_start":271,"byte_end":272,"line_start":7,"line_end":7,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command, get_mode_commands};","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/walkup.rs","byte_start":304,"byte_end":305,"line_start":7,"line_end":7,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command, get_mode_commands};","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Command` and `get_mode_commands`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/walkup.rs:7:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::execute::{Mode, Command, get_mode_commands};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Command`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":748,"byte_end":755,"line_start":28,"line_end":28,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":28,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":746,"byte_end":755,"line_start":28,"line_end":28,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":741,"byte_end":742,"line_start":28,"line_end":28,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":755,"byte_end":756,"line_start":28,"line_end":28,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"use crate::execute::{Mode, Command};","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Command`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:28:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::execute::{Mode, Command};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::dynamic_registry::register_command`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":762,"byte_end":803,"line_start":29,"line_end":29,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"use crate::dynamic_registry::register_command;","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":758,"byte_end":805,"line_start":29,"line_end":30,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::dynamic_registry::register_command;","highlight_start":1,"highlight_end":47},{"text":"use crate::new_commands::register_custom_commands;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::dynamic_registry::register_command`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::dynamic_registry::register_command;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/commandcompleter.rs","byte_start":10365,"byte_end":10366,"line_start":230,"line_end":230,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        _ => false,","highlight_start":9,"highlight_end":10}],"label":"no value can reach this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"multiple earlier patterns match some of the same values","code":null,"level":"note","spans":[{"file_name":"src/commandcompleter.rs","byte_start":8402,"byte_end":8416,"line_start":217,"line_end":217,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        Mode::UserMode => matches!(command.as_str(), \"enable\" | \"reload\" | \"exit\" | \"clear\" | \"help\" | \"show\" | \"ping\"),","highlight_start":9,"highlight_end":23}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/commandcompleter.rs","byte_start":8523,"byte_end":8543,"line_start":218,"line_end":218,"column_start":9,"column_end":29,"is_primary":false,"text":[{"text":"        Mode::PrivilegedMode => matches!(command.as_str(), \"configure\" | \"reload\" | \"debug\" | \"undebug\" | \"exit\" | \"clear\" | \"help\" | \"write\" | \"copy\" | \"clock\" | \"clear\" | \"ping\" | \"show\" | \"ifconfig\"),","highlight_start":9,"highlight_end":29}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/commandcompleter.rs","byte_start":8727,"byte_end":8743,"line_start":219,"line_end":219,"column_start":9,"column_end":25,"is_primary":false,"text":[{"text":"        Mode::ConfigMode => matches!(command.as_str(), \"hostname\" | \"reload\" | \"interface\" | \"ip\" | \"no\" | \"exit\" | \"clear\" | \"tunnel\" | \"virtual-template\" | \"help\" | \"write\" | \"ping\" | \"vlan\" | \"access-list\" | \"router\" | \"enable\" | \"service\" | \"set\" | \"ifconfig\" | \"ntp\" | \"crypto\"),","highlight_start":9,"highlight_end":25}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/commandcompleter.rs","byte_start":9012,"byte_end":9031,"line_start":220,"line_end":220,"column_start":9,"column_end":28,"is_primary":false,"text":[{"text":"        Mode::InterfaceMode => matches!(command.as_str(), \"exit\" | \"reload\" | \"shutdown\" | \"no\" | \"switchport\" | \"clear\" | \"help\" | \"write\" | \"interface\" | \"ip\"), ","highlight_start":9,"highlight_end":28}],"label":"matches some of the same values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/commandcompleter.rs","byte_start":10365,"byte_end":10366,"line_start":230,"line_end":230,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        _ => false,","highlight_start":9,"highlight_end":10}],"label":"...and 8 other patterns collectively make this unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/commandcompleter.rs:230:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _ => false,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno value can reach this\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: multiple earlier patterns match some of the same values\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/commandcompleter.rs:230:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   Mode::UserMode => matches!(command.as_str(), \"enable\" | \"reload\" | \"exit\" | \"clear\" | \"help\" | \"show\" | \"ping\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   Mode::PrivilegedMode => matches!(command.as_str(), \"configure\" | \"reload\" | \"debug\" | \"undebug\" | \"exit\" | \"clear\" | \"help\" | \"write\" | \"copy\" | \"clo\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   Mode::ConfigMode => matches!(command.as_str(), \"hostname\" | \"reload\" | \"interface\" | \"ip\" | \"no\" | \"exit\" | \"clear\" | \"tunnel\" | \"virtual-template\" |\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   Mode::InterfaceMode => matches!(command.as_str(), \"exit\" | \"reload\" | \"shutdown\" | \"no\" | \"switchport\" | \"clear\" | \"help\" | \"write\" | \"interface\" | \"\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches some of the same values\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   _ => false,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m...and 8 other patterns collectively make this unreachable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/commandcompleter.rs","byte_start":8678,"byte_end":8685,"line_start":218,"line_end":218,"column_start":164,"column_end":171,"is_primary":true,"text":[{"text":"        Mode::PrivilegedMode => matches!(command.as_str(), \"configure\" | \"reload\" | \"debug\" | \"undebug\" | \"exit\" | \"clear\" | \"help\" | \"write\" | \"copy\" | \"clock\" | \"clear\" | \"ping\" | \"show\" | \"ifconfig\"),","highlight_start":164,"highlight_end":171}],"label":"no value can reach this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/commandcompleter.rs","byte_start":8630,"byte_end":8637,"line_start":218,"line_end":218,"column_start":116,"column_end":123,"is_primary":false,"text":[{"text":"        Mode::PrivilegedMode => matches!(command.as_str(), \"configure\" | \"reload\" | \"debug\" | \"undebug\" | \"exit\" | \"clear\" | \"help\" | \"write\" | \"copy\" | \"clock\" | \"clear\" | \"ping\" | \"show\" | \"ifconfig\"),","highlight_start":116,"highlight_end":123}],"label":"matches all the relevant values","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/commandcompleter.rs:218:164\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0md\" | \"debug\" | \"undebug\" | \"exit\" | \"clear\" | \"help\" | \"write\" | \"copy\" | \"clock\" | \"clear\" | \"ping\" | \"show\" | \"ifconfig\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches all the relevant values\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mno value can reach this\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `interface_name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":34814,"byte_end":34828,"line_start":646,"line_end":646,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"                            let Some(interface_name) = &context.selected_interface else {","highlight_start":38,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":34814,"byte_end":34828,"line_start":646,"line_end":646,"column_start":38,"column_end":52,"is_primary":true,"text":[{"text":"                            let Some(interface_name) = &context.selected_interface else {","highlight_start":38,"highlight_end":52}],"label":null,"suggested_replacement":"_interface_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `interface_name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:646:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let Some(interface_name) = &context.selected_interface else {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_interface_name`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":55495,"byte_end":55499,"line_start":955,"line_end":955,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"                            for (name, acl) in acl_store.iter() {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":55495,"byte_end":55499,"line_start":955,"line_end":955,"column_start":34,"column_end":38,"is_primary":true,"text":[{"text":"                            for (name, acl) in acl_store.iter() {","highlight_start":34,"highlight_end":38}],"label":null,"suggested_replacement":"_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:955:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   for (name, acl) in acl_store.iter() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_name`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `args`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":66252,"byte_end":66256,"line_start":1155,"line_end":1155,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            execute: |args, context, _| {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":66252,"byte_end":66256,"line_start":1155,"line_end":1155,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            execute: |args, context, _| {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"_args","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `args`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1155:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            execute: |args, context, _| {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_args`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ip_address`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":98719,"byte_end":98729,"line_start":1706,"line_end":1706,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                            let ip_address = interface_config.0.clone();","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":98719,"byte_end":98729,"line_start":1706,"line_end":1706,"column_start":33,"column_end":43,"is_primary":true,"text":[{"text":"                            let ip_address = interface_config.0.clone();","highlight_start":33,"highlight_end":43}],"label":null,"suggested_replacement":"_ip_address","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ip_address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1706:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let ip_address = interface_config.0.clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ip_address`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ip_address`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":100807,"byte_end":100817,"line_start":1750,"line_end":1750,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"                            if let Some((ip_address, broadcast_address)) = network_state.get(interface) {","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":100807,"byte_end":100817,"line_start":1750,"line_end":1750,"column_start":42,"column_end":52,"is_primary":true,"text":[{"text":"                            if let Some((ip_address, broadcast_address)) = network_state.get(interface) {","highlight_start":42,"highlight_end":52}],"label":null,"suggested_replacement":"_ip_address","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ip_address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1750:42\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if let Some((ip_address, broadcast_address)) = network_state.get(interface) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ip_address`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `broadcast_address`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":100819,"byte_end":100836,"line_start":1750,"line_end":1750,"column_start":54,"column_end":71,"is_primary":true,"text":[{"text":"                            if let Some((ip_address, broadcast_address)) = network_state.get(interface) {","highlight_start":54,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":100819,"byte_end":100836,"line_start":1750,"line_end":1750,"column_start":54,"column_end":71,"is_primary":true,"text":[{"text":"                            if let Some((ip_address, broadcast_address)) = network_state.get(interface) {","highlight_start":54,"highlight_end":71}],"label":null,"suggested_replacement":"_broadcast_address","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `broadcast_address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1750:54\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if let Some((ip_address, broadcast_address)) = network_state.get(interface) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_broadcast_address`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `args`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":130147,"byte_end":130151,"line_start":2346,"line_end":2346,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"        execute: |args, context, _| {","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":130147,"byte_end":130151,"line_start":2346,"line_end":2346,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"        execute: |args, context, _| {","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":"_args","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `args`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2346:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        execute: |args, context, _| {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_args`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `vlan_name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":135320,"byte_end":135329,"line_start":2458,"line_end":2458,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"                        let vlan_name = format!(\"VLAN{}\", vlan_id);","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":135320,"byte_end":135329,"line_start":2458,"line_end":2458,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"                        let vlan_name = format!(\"VLAN{}\", vlan_id);","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":"_vlan_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `vlan_name`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2458:29\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let vlan_name = format!(\"VLAN{}\", vlan_id);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_vlan_name`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `protocol`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":143762,"byte_end":143770,"line_start":2633,"line_end":2633,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let protocol = args.get(2).clone();","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":143762,"byte_end":143770,"line_start":2633,"line_end":2633,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"                    let protocol = args.get(2).clone();","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":"_protocol","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `protocol`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2633:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let protocol = args.get(2).clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_protocol`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":36828,"byte_end":36843,"line_start":675,"line_end":675,"column_start":49,"column_end":64,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":36828,"byte_end":36832,"line_start":675,"line_end":675,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:675:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let mut ospf_config = OSPF_CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":37952,"byte_end":37967,"line_start":687,"line_end":687,"column_start":49,"column_end":64,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":37952,"byte_end":37956,"line_start":687,"line_end":687,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:687:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let mut ospf_config = OSPF_CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":39017,"byte_end":39033,"line_start":702,"line_end":702,"column_start":49,"column_end":65,"is_primary":true,"text":[{"text":"                                            let mut eigrp_config = EIGRP_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":39017,"byte_end":39021,"line_start":702,"line_end":702,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"                                            let mut eigrp_config = EIGRP_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:702:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m702\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let mut eigrp_config = EIGRP_CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":39114,"byte_end":39129,"line_start":703,"line_end":703,"column_start":49,"column_end":64,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":39114,"byte_end":39118,"line_start":703,"line_end":703,"column_start":49,"column_end":53,"is_primary":true,"text":[{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":49,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:703:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m703\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let mut ospf_config = OSPF_CONFIG.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":100546,"byte_end":100563,"line_start":1746,"line_end":1746,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"                            let mut network_state = IP_ADDRESS_STATE.lock().unwrap();","highlight_start":33,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":100546,"byte_end":100550,"line_start":1746,"line_end":1746,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"                            let mut network_state = IP_ADDRESS_STATE.lock().unwrap();","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1746:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let mut network_state = IP_ADDRESS_STATE.lock().unwrap();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `initial_hostname`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":3273,"byte_end":3289,"line_start":86,"line_end":86,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    let initial_hostname = \"Router\".to_string();","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3273,"byte_end":3289,"line_start":86,"line_end":86,"column_start":9,"column_end":25,"is_primary":true,"text":[{"text":"    let initial_hostname = \"Router\".to_string();","highlight_start":9,"highlight_end":25}],"label":null,"suggested_replacement":"_initial_hostname","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `initial_hostname`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:86:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let initial_hostname = \"Router\".to_string();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_initial_hostname`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `exit_requested`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5035,"byte_end":5049,"line_start":137,"line_end":137,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"    let mut exit_requested = false;","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5035,"byte_end":5049,"line_start":137,"line_end":137,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"    let mut exit_requested = false;","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_exit_requested","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `exit_requested`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:137:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut exit_requested = false;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_exit_requested`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5031,"byte_end":5049,"line_start":137,"line_end":137,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"    let mut exit_requested = false;","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5031,"byte_end":5035,"line_start":137,"line_end":137,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut exit_requested = false;","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:137:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut exit_requested = false;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `save_config` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/run_config.rs","byte_start":1137,"byte_end":1148,"line_start":29,"line_end":29,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"pub fn save_config(config: &CliConfig) -> std::io::Result<()> {","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `save_config` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/run_config.rs:29:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn save_config(config: &CliConfig) -> std::io::Result<()> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `load_config` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/run_config.rs","byte_start":2041,"byte_end":2052,"line_start":55,"line_end":55,"column_start":8,"column_end":19,"is_primary":true,"text":[{"text":"pub fn load_config() -> CliConfig {","highlight_start":8,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `load_config` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/run_config.rs:55:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn load_config() -> CliConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `ip_address` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/network_config.rs","byte_start":402,"byte_end":417,"line_start":14,"line_end":14,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"pub struct InterfaceConfig {","highlight_start":12,"highlight_end":27}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/network_config.rs","byte_start":428,"byte_end":438,"line_start":15,"line_end":15,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    pub ip_address: Ipv4Addr,  ","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `ip_address` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/network_config.rs:15:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct InterfaceConfig {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub ip_address: Ipv4Addr,  \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `areas` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/network_config.rs","byte_start":11853,"byte_end":11863,"line_start":283,"line_end":283,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct OSPFConfig {","highlight_start":12,"highlight_end":22}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/network_config.rs","byte_start":12026,"byte_end":12031,"line_start":288,"line_end":288,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    pub areas: HashMap<String, AreaConfig>,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`OSPFConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `areas` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/network_config.rs:288:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct OSPFConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub areas: HashMap<String, AreaConfig>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `OSPFConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"fields `authentication`, `stub`, and `default_cost` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/network_config.rs","byte_start":12658,"byte_end":12668,"line_start":306,"line_end":306,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct AreaConfig {","highlight_start":12,"highlight_end":22}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/network_config.rs","byte_start":12679,"byte_end":12693,"line_start":307,"line_end":307,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    pub authentication: bool,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/network_config.rs","byte_start":12709,"byte_end":12713,"line_start":308,"line_end":308,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    pub stub: bool,","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/network_config.rs","byte_start":12729,"byte_end":12741,"line_start":309,"line_end":309,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    pub default_cost: Option<u32>,","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`AreaConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `authentication`, `stub`, and `default_cost` are never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/network_config.rs:307:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AreaConfig {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub authentication: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub stub: bool,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m309\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub default_cost: Option<u32>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `AreaConfig` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `get_enable_password` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/network_config.rs","byte_start":19578,"byte_end":19597,"line_start":483,"line_end":483,"column_start":8,"column_end":27,"is_primary":true,"text":[{"text":"pub fn get_enable_password() -> Option<String> {","highlight_start":8,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `get_enable_password` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/network_config.rs:483:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m483\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn get_enable_password() -> Option<String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `get_enable_secret` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/network_config.rs","byte_start":19888,"byte_end":19905,"line_start":494,"line_end":494,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"pub fn get_enable_secret() -> Option<String> {","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `get_enable_secret` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/network_config.rs:494:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn get_enable_secret() -> Option<String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `str_to_static` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/dynamic_registry.rs","byte_start":1165,"byte_end":1178,"line_start":45,"line_end":45,"column_start":4,"column_end":17,"is_primary":true,"text":[{"text":"fn str_to_static(s: &str) -> &'static str {","highlight_start":4,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `str_to_static` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dynamic_registry.rs:45:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn str_to_static(s: &str) -> &'static str {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `vec_str_to_static` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/dynamic_registry.rs","byte_start":1258,"byte_end":1275,"line_start":49,"line_end":49,"column_start":4,"column_end":21,"is_primary":true,"text":[{"text":"fn vec_str_to_static(v: Vec<&str>) -> Vec<&'static str> {","highlight_start":4,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `vec_str_to_static` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/dynamic_registry.rs:49:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn vec_str_to_static(v: Vec<&str>) -> Vec<&'static str> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `CommandContext` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/walkup.rs","byte_start":9020,"byte_end":9034,"line_start":236,"line_end":236,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"pub struct CommandContext{","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `CommandContext` is never constructed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/walkup.rs:236:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CommandContext{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"associated items `new`, `execute_command`, and `process_command` are never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/walkup.rs","byte_start":9220,"byte_end":9239,"line_start":243,"line_end":243,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"impl CommandContext  {","highlight_start":1,"highlight_end":20}],"label":"associated items in this implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/walkup.rs","byte_start":9446,"byte_end":9449,"line_start":249,"line_end":249,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn new() -> Self {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/walkup.rs","byte_start":9893,"byte_end":9908,"line_start":263,"line_end":263,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn execute_command(&mut self, command: &str) -> Result<(), String> {","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/walkup.rs","byte_start":10469,"byte_end":10484,"line_start":276,"line_end":276,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"    pub fn process_command(&self, command: &str) -> Result<(), String> {","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: associated items `new`, `execute_command`, and `process_command` are never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/walkup.rs:249:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl CommandContext  {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12massociated items in this implementation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn new() -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn execute_command(&mut self, command: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn process_command(&self, command: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":5570,"byte_end":5597,"line_start":155,"line_end":155,"column_start":17,"column_end":44,"is_primary":true,"text":[{"text":"                rl.add_history_entry(input);","highlight_start":17,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5570,"byte_end":5570,"line_start":155,"line_end":155,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                rl.add_history_entry(input);","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:155:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                rl.add_history_entry(input);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mrl.add_history_entry(input);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":32950,"byte_end":50575,"line_start":612,"line_end":875,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    match args.get(0) {","highlight_start":21,"highlight_end":40},{"text":"                        Some(&\"clock\") => {","highlight_start":1,"highlight_end":44},{"text":"                            if let Some(clock) = clock {","highlight_start":1,"highlight_end":57},{"text":"                                handle_show_clock(clock);","highlight_start":1,"highlight_end":58},{"text":"                                Ok(())","highlight_start":1,"highlight_end":39},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                Err(\"Clock functionality is unavailable.\".to_string())","highlight_start":1,"highlight_end":87},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        Some(&\"uptime\") => {","highlight_start":1,"highlight_end":45},{"text":"                            if let Some(clock) = clock {","highlight_start":1,"highlight_end":57},{"text":"                                handle_show_uptime(clock);","highlight_start":1,"highlight_end":59},{"text":"                                Ok(())","highlight_start":1,"highlight_end":39},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                Err(\"Clock functionality is unavailable.\".to_string())","highlight_start":1,"highlight_end":87},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        Some(&\"version\") => {","highlight_start":1,"highlight_end":46},{"text":"                            println!(\"Cisco IOS Software, C2900 Software (C2900-UNIVERSALK9-M), Version 15.1(4)M4, RELEASE SOFTWARE (fc2)\");","highlight_start":1,"highlight_end":141},{"text":"                            println!(\"Compiled Thurs 5-Jan-12 15:41 by pt_team\");","highlight_start":1,"highlight_end":82},{"text":"                            println!(\" \");","highlight_start":1,"highlight_end":43},{"text":"                            println!(\"ROM: System Bootstrap, Version 15.1(4)M4, RELEASE SOFTWARE (fc1)\");","highlight_start":1,"highlight_end":106},{"text":"                            if let Some(clock) = clock {","highlight_start":1,"highlight_end":57},{"text":"                                handle_show_uptime(clock);","highlight_start":1,"highlight_end":59},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                return Err(\"Clock functionality is unavailable.\".to_string());","highlight_start":1,"highlight_end":95},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            println!(\" \");","highlight_start":1,"highlight_end":43},{"text":"                            println!(\"Device Details... \");","highlight_start":1,"highlight_end":60},{"text":"                            println!(\"PNF Router\");","highlight_start":1,"highlight_end":52},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        Some(&\"interfaces\") => {","highlight_start":1,"highlight_end":49},{"text":"                            let ip_address_state = IP_ADDRESS_STATE.lock().unwrap();","highlight_start":1,"highlight_end":85},{"text":"                            let Some(interface_name) = &context.selected_interface else {","highlight_start":1,"highlight_end":90},{"text":"                                return Err(\"No interface selected. Use the 'interface' command first.\".into());","highlight_start":1,"highlight_end":112},{"text":"                            };","highlight_start":1,"highlight_end":31},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                            if ip_address_state.is_empty() {","highlight_start":1,"highlight_end":61},{"text":"                                println!(\"No interfaces found.\");","highlight_start":1,"highlight_end":66},{"text":"                                return Ok(());","highlight_start":1,"highlight_end":47},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                for (interface_name, (ip_address, _)) in ip_address_state.iter() {","highlight_start":1,"highlight_end":99},{"text":"                                    println!(\"{} is up, line protocol is up\", interface_name);","highlight_start":1,"highlight_end":95},{"text":"                                    println!(\"  Internet address is {}, subnet mask 255.255.255.0\", ip_address);","highlight_start":1,"highlight_end":113},{"text":"                                    println!(\"  MTU 1500 bytes, BW 10000 Kbit, DLY 100000 usec\");","highlight_start":1,"highlight_end":98},{"text":"                                    println!(\"  Encapsulation ARPA, loopback not set, keepalive set (10 sec)\");","highlight_start":1,"highlight_end":112},{"text":"                                    println!(\"  Last clearing of \\\"show interface\\\" counters: never\");","highlight_start":1,"highlight_end":103},{"text":"                                    println!(\"  Input queue: 0/2000/0/0 (size/max/drops/flushes); Total output drops: 0\");","highlight_start":1,"highlight_end":123},{"text":"                                    println!(\"  5 minute input rate 1000 bits/sec, 10 packets/sec\");","highlight_start":1,"highlight_end":101},{"text":"                                    println!(\"  5 minute output rate 500 bits/sec, 5 packets/sec\");","highlight_start":1,"highlight_end":100},{"text":"                                    println!(\"  100 packets input, 1000 bytes, 10 no buffer\");","highlight_start":1,"highlight_end":95},{"text":"                                    println!(\"  50 packets output, 500 bytes, 0 underruns\");","highlight_start":1,"highlight_end":93},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                            Ok(())","highlight_start":1,"highlight_end":35},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        Some(&\"ip\") => {","highlight_start":1,"highlight_end":41},{"text":"                            match args.get(1) {","highlight_start":1,"highlight_end":48},{"text":"                                Some(&\"ospf\") => {","highlight_start":1,"highlight_end":51},{"text":"                                    match args.get(2) {","highlight_start":1,"highlight_end":56},{"text":"                                        Some(&\"neighbor\") => {","highlight_start":1,"highlight_end":63},{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":1,"highlight_end":95},{"text":"                                            println!(\"Current OSPF Configuration:\");","highlight_start":1,"highlight_end":85},{"text":"                                            println!(\"Router ID: {:?}\", ospf_config.router_id.clone().unwrap_or(\"Not set\".to_string()));","highlight_start":1,"highlight_end":137},{"text":"                                            println!(\"Administrative Distance: {:?}\", ospf_config.distance.unwrap_or(110));","highlight_start":1,"highlight_end":124},{"text":"                                            println!(\"Default Information Originate: {}\", ospf_config.default_information_originate);","highlight_start":1,"highlight_end":134},{"text":"                                            for (ip_address, cost_value) in &ospf_config.neighbors {","highlight_start":1,"highlight_end":101},{"text":"                                                println!(\"Neighbor Ip address: {} amd cost value: {:?}\", ip_address, cost_value);","highlight_start":1,"highlight_end":130},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            println!(\"Passive Interfaces: {:?}\", ospf_config.passive_interfaces);","highlight_start":1,"highlight_end":114},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        Some(&\"interface\") => {","highlight_start":1,"highlight_end":64},{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":1,"highlight_end":95},{"text":"                                            println!(\"Current OSPF Configuration:\");","highlight_start":1,"highlight_end":85},{"text":"                                            println!(\"Process ID: {:?}\", ospf_config.process_id);","highlight_start":1,"highlight_end":98},{"text":"                                            for (key, area_id) in &ospf_config.networks {","highlight_start":1,"highlight_end":90},{"text":"                                                println!(\"Network: {} in Area: {}\", key, area_id);","highlight_start":1,"highlight_end":99},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            println!(\"Passive Interfaces: {:?}\", ospf_config.passive_interfaces);","highlight_start":1,"highlight_end":114},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        _ => Err(\"Invalid OSPF subcommand. Use 'neighbor'\".into())","highlight_start":1,"highlight_end":99},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                                Some(&\"eigrp\") => {","highlight_start":1,"highlight_end":52},{"text":"                                    match args.get(2) {","highlight_start":1,"highlight_end":56},{"text":"                                        Some(&\"interface\") => {","highlight_start":1,"highlight_end":64},{"text":"                                            let mut eigrp_config = EIGRP_CONFIG.lock().unwrap();","highlight_start":1,"highlight_end":97},{"text":"                                            let mut ospf_config = OSPF_CONFIG.lock().unwrap();","highlight_start":1,"highlight_end":95},{"text":"                                            println!(\"Current EIGRP Configuration:\");","highlight_start":1,"highlight_end":86},{"text":"                                            println!(\"Process ID: {:?}\", eigrp_config.process_id);","highlight_start":1,"highlight_end":99},{"text":"                                            for (key, area_id) in &eigrp_config.networks {","highlight_start":1,"highlight_end":91},{"text":"                                                println!(\"Network: {} in Area: {}\", key, area_id);","highlight_start":1,"highlight_end":99},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            println!(\"Passive Interfaces: {:?}\", ospf_config.passive_interfaces);","highlight_start":1,"highlight_end":114},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        _ => Err(\"Invalid EIGRP subcommand. Use 'interface'\".into())","highlight_start":1,"highlight_end":101},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                                Some(&\"route\") => {","highlight_start":1,"highlight_end":52},{"text":"                                    let route_table = ROUTE_TABLE.lock().unwrap();","highlight_start":1,"highlight_end":83},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                                    if args.len() == 2 {","highlight_start":1,"highlight_end":57},{"text":"                                        println!(\"Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP\");","highlight_start":1,"highlight_end":127},{"text":"                                        println!(\"       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area\");","highlight_start":1,"highlight_end":123},{"text":"                                        println!(\"       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2\");","highlight_start":1,"highlight_end":123},{"text":"                                        println!(\"       E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP\");","highlight_start":1,"highlight_end":122},{"text":"                                        println!(\"       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area\");","highlight_start":1,"highlight_end":133},{"text":"                                        println!(\"       * - candidate default, U - per-user static route, o - ODR\");","highlight_start":1,"highlight_end":118},{"text":"                                        println!(\"       P - periodic downloaded static route\");","highlight_start":1,"highlight_end":97},{"text":"                                        println!();","highlight_start":1,"highlight_end":52},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                                        if route_table.is_empty() {","highlight_start":1,"highlight_end":68},{"text":"                                            println!(\"No routes configured.\");","highlight_start":1,"highlight_end":79},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            for (destination, (netmask, next_hop_or_iface)) in route_table.iter() {","highlight_start":1,"highlight_end":116},{"text":"                                                let route_type = if next_hop_or_iface.contains(\"exit_interface\") {","highlight_start":1,"highlight_end":115},{"text":"                                                    \"C\"","highlight_start":1,"highlight_end":56},{"text":"                                                } else {","highlight_start":1,"highlight_end":57},{"text":"                                                    \"S\"","highlight_start":1,"highlight_end":56},{"text":"                                                };","highlight_start":1,"highlight_end":51},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                                                println!(","highlight_start":1,"highlight_end":58},{"text":"                                                    \"{}\\t{} {} via {}\",","highlight_start":1,"highlight_end":72},{"text":"                                                    route_type, destination, netmask, next_hop_or_iface","highlight_start":1,"highlight_end":104},{"text":"                                                );","highlight_start":1,"highlight_end":51},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    } else if args.len() == 3 {","highlight_start":1,"highlight_end":64},{"text":"                                        let destination_ip = args[2];","highlight_start":1,"highlight_end":70},{"text":"                                        if let Some((netmask, next_hop_or_iface)) = route_table.get(destination_ip) {","highlight_start":1,"highlight_end":118},{"text":"                                            let route_type = if next_hop_or_iface.contains(\"exit_interface\") {","highlight_start":1,"highlight_end":111},{"text":"                                                \"connected\"","highlight_start":1,"highlight_end":60},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                \"static\"","highlight_start":1,"highlight_end":57},{"text":"                                            };","highlight_start":1,"highlight_end":47},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                                            println!(\"Routing entry for {}/{}\", destination_ip, netmask);","highlight_start":1,"highlight_end":106},{"text":"                                            println!(\"Known via \\\"{}\\\"\", route_type);","highlight_start":1,"highlight_end":86},{"text":"                                            println!(\"  Routing Descriptor Blocks:\");","highlight_start":1,"highlight_end":86},{"text":"                                            println!(\"  * {}\", next_hop_or_iface);","highlight_start":1,"highlight_end":83},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            println!(\"No route found for {}.\", destination_ip);","highlight_start":1,"highlight_end":96},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        println!(\"Invalid arguments. Use 'show ip route' or 'show ip route <ip-address>'.\");","highlight_start":1,"highlight_end":125},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                                    Ok(())","highlight_start":1,"highlight_end":43},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                                Some(&\"rip\") => {","highlight_start":1,"highlight_end":50},{"text":"                                    let rip_config = RIP_CONFIG.lock().unwrap();","highlight_start":1,"highlight_end":81},{"text":"                                    if rip_config.networks.is_empty() && rip_config.interfaces.is_empty() {","highlight_start":1,"highlight_end":108},{"text":"                                        println!(\"No rip routes configured.\");","highlight_start":1,"highlight_end":79},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        let auto_summary = rip_config.auto_summary;","highlight_start":1,"highlight_end":84},{"text":"                                        let distance = rip_config.distance.unwrap_or(120);","highlight_start":1,"highlight_end":91},{"text":"                                        //let default_metric = rip_config.default_metric.unwrap_or(4);","highlight_start":1,"highlight_end":103},{"text":"                                        println!(\"RIP global parameters\");","highlight_start":1,"highlight_end":75},{"text":"                                        println!(\"  RIP protocol  : enabled\");","highlight_start":1,"highlight_end":79},{"text":"                                        println!(\"  Auto-summary  : {}\", if auto_summary { \"enabled\" } else { \"disabled\" });","highlight_start":1,"highlight_end":125},{"text":"                                        println!(\"  Default Metric: 4\");","highlight_start":1,"highlight_end":73},{"text":"                                        println!(\"  Distance      : {}\", distance);","highlight_start":1,"highlight_end":84},{"text":"                                        println!(\"  Route changes : 0\");","highlight_start":1,"highlight_end":73},{"text":"                                        println!(\"  Queries       : 0\");","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        // Display RIP interface information","highlight_start":1,"highlight_end":77},{"text":"                                        println!(\"\\nRIP interface information\");","highlight_start":1,"highlight_end":81},{"text":"                                        println!(","highlight_start":1,"highlight_end":50},{"text":"                                            \"{:<15} {:<11} {:<18} {:<10} {:<11} {:<5}\",","highlight_start":1,"highlight_end":88},{"text":"                                            \"IP Address\", \"Status\", \"Send mode\", \"Recv mode\", \"Metric\", \"Auth\"","highlight_start":1,"highlight_end":111},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                        println!(\"{:-<80}\", \"\");","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        for ip_network in &rip_config.networks {","highlight_start":1,"highlight_end":81},{"text":"                                            println!(","highlight_start":1,"highlight_end":54},{"text":"                                                \"{:<15} {:<11} {:<18} {:<10} {:<11} {:<5}\",","highlight_start":1,"highlight_end":92},{"text":"                                                ip_network,","highlight_start":1,"highlight_end":60},{"text":"                                                \"enabled\",","highlight_start":1,"highlight_end":59},{"text":"                                                \"V2-only\",","highlight_start":1,"highlight_end":59},{"text":"                                                \"V2-only\",","highlight_start":1,"highlight_end":59},{"text":"                                                \"5\", // Default metric","highlight_start":1,"highlight_end":71},{"text":"                                                \"none\"","highlight_start":1,"highlight_end":55},{"text":"                                            );","highlight_start":1,"highlight_end":47},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        Ok(())","highlight_start":1,"highlight_end":47},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                                Some(&\"interface\") => {","highlight_start":1,"highlight_end":56},{"text":"                                    match args.get(2) {","highlight_start":1,"highlight_end":56},{"text":"                                        Some(&\"brief\") => {","highlight_start":1,"highlight_end":60},{"text":"                                            let ip_address_state = IP_ADDRESS_STATE.lock().unwrap();","highlight_start":1,"highlight_end":101},{"text":"                                            let status_map = STATUS_MAP.lock().unwrap();","highlight_start":1,"highlight_end":89},{"text":"                                ","highlight_start":1,"highlight_end":33},{"text":"                                            println!(","highlight_start":1,"highlight_end":54},{"text":"                                                \"{:<22} {:<15} {:<8} {:<20} {:<20} {:<10}\",","highlight_start":1,"highlight_end":92},{"text":"                                                \"Interface\", \"IP-Address\", \"OK?\", \"Method\", \"Status\", \"Protocol\"","highlight_start":1,"highlight_end":113},{"text":"                                            );","highlight_start":1,"highlight_end":47},{"text":"                                ","highlight_start":1,"highlight_end":33},{"text":"                                            for (interface_name, (ip_address, _)) in ip_address_state.iter() {","highlight_start":1,"highlight_end":111},{"text":"                                                let is_up = status_map.get(interface_name).copied().unwrap_or(false);","highlight_start":1,"highlight_end":118},{"text":"                                                let status = if is_up {","highlight_start":1,"highlight_end":72},{"text":"                                                    \"up\"","highlight_start":1,"highlight_end":57},{"text":"                                                } else {","highlight_start":1,"highlight_end":57},{"text":"                                                    \"administratively down\"","highlight_start":1,"highlight_end":76},{"text":"                                                };","highlight_start":1,"highlight_end":51},{"text":"                                                let protocol = if is_up {","highlight_start":1,"highlight_end":74},{"text":"                                                    \"up\"","highlight_start":1,"highlight_end":57},{"text":"                                                } else {","highlight_start":1,"highlight_end":57},{"text":"                                                    \"down\"","highlight_start":1,"highlight_end":59},{"text":"                                                };","highlight_start":1,"highlight_end":51},{"text":"                                ","highlight_start":1,"highlight_end":33},{"text":"                                                println!(","highlight_start":1,"highlight_end":58},{"text":"                                                    \"{:<22} {:<15} YES     unset/manual        {}         {}\",","highlight_start":1,"highlight_end":111},{"text":"                                                    interface_name, ip_address, status, protocol","highlight_start":1,"highlight_end":97},{"text":"                                                );","highlight_start":1,"highlight_end":51},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                            Ok(())","highlight_start":1,"highlight_end":51},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        _ => Err(\"Invalid interface subcommand. Use 'brief'\".into())","highlight_start":1,"highlight_end":101},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                },","highlight_start":1,"highlight_end":35},{"text":"                                _ => Err(\"Invalid IP subcommand. Use 'ospf neighbor', 'route', or 'interface brief'\".into())","highlight_start":1,"highlight_end":125},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        Some(&\"vlan\") => {","highlight_start":1,"highlight_end":43},{"text":"                            if let (Some(vlan_names), Some(vlan_states)) = (&context.vlan_names, &context.vlan_states) {","highlight_start":1,"highlight_end":121},{"text":"                                // Display table header for VLANs","highlight_start":1,"highlight_end":66},{"text":"                                println!(\"{:<6} {:<30} {:<10} {}\", \"VLAN\", \"Name\", \"Status\", \"Ports\");","highlight_start":1,"highlight_end":103},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                                for (vlan_id_str, vlan_name) in vlan_names {","highlight_start":1,"highlight_end":77},{"text":"                                    let vlan_id: u16 = vlan_id_str.parse().unwrap_or_default(); ","highlight_start":1,"highlight_end":97},{"text":"                                    let unknown_status = \"active\".to_string();","highlight_start":1,"highlight_end":79},{"text":"                                    let status = vlan_states.get(&vlan_id).unwrap_or(&unknown_status); ","highlight_start":1,"highlight_end":104},{"text":"                                    let ports = \" \";  // temporary","highlight_start":1,"highlight_end":67},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                                    println!(\"{:<6} {:<30} {:<10} {}\", vlan_id, vlan_name, status, ports);","highlight_start":1,"highlight_end":107},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                                Ok(())","highlight_start":1,"highlight_end":39},{"text":"                            } else if let Some(vlan_names) = &context.vlan_names {","highlight_start":1,"highlight_end":83},{"text":"                                println!(\"{:<6} {:<30} {:<10} {}\", \"VLAN\", \"Name\", \"Status\", \"Ports\");","highlight_start":1,"highlight_end":103},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                                for vlan_id_str in vlan_names.keys() {","highlight_start":1,"highlight_end":71},{"text":"                                    let vlan_id: u16 = vlan_id_str.parse().unwrap_or_default();","highlight_start":1,"highlight_end":96},{"text":"                                    let vlan_name = format!(\"VLAN{}\", vlan_id);","highlight_start":1,"highlight_end":80},{"text":"                                    let status = \"active\"; ","highlight_start":1,"highlight_end":60},{"text":"                                    let ports = \" \"; // temporary","highlight_start":1,"highlight_end":66},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"                                    println!(\"{:<6} {:<30} {:<10} {}\", vlan_id, vlan_name, status, ports);","highlight_start":1,"highlight_end":107},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"                                Ok(())","highlight_start":1,"highlight_end":39},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                Err(\"No VLAN information available.\".into())","highlight_start":1,"highlight_end":77},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        },","highlight_start":1,"highlight_end":27},{"text":"                        _ => Ok(()),","highlight_start":1,"highlight_end":37},{"text":"                    };","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":32950,"byte_end":32950,"line_start":612,"line_end":612,"column_start":21,"column_end":21,"is_primary":true,"text":[{"text":"                    match args.get(0) {","highlight_start":21,"highlight_end":21}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:612:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    match args.get(0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m613\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        Some(&\"clock\") => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            if let Some(clock) = clock {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                handle_show_clock(clock);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m874\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        _ => Ok(()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m875\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mmatch args.get(0) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused `Result` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":79537,"byte_end":79584,"line_start":1373,"line_end":1373,"column_start":37,"column_end":84,"is_primary":true,"text":[{"text":"                                    handle_clock_set(time, day, month, year, clock);","highlight_start":37,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this `Result` may be an `Err` variant, which should be handled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `let _ = ...` to ignore the resulting value","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":79537,"byte_end":79537,"line_start":1373,"line_end":1373,"column_start":37,"column_end":37,"is_primary":true,"text":[{"text":"                                    handle_clock_set(time, day, month, year, clock);","highlight_start":37,"highlight_end":37}],"label":null,"suggested_replacement":"let _ = ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused `Result` that must be used\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1373:37\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   handle_clock_set(time, day, month, year, clock);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this `Result` may be an `Err` variant, which should be handled\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `let _ = ...` to ignore the resulting value\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1373\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10mlet _ = \u001b[0m\u001b[0mhandle_clock_set(time, day, month, year, clock);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":89361,"byte_end":89369,"line_start":1556,"line_end":1556,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                                        let key = args[2].clone();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(noop_method_call)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":89361,"byte_end":89369,"line_start":1556,"line_end":1556,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                                        let key = args[2].clone();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1556:58\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let key = args[2].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(noop_method_call)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":89993,"byte_end":90001,"line_start":1566,"line_end":1566,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                                        let key = args[4].clone();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":89993,"byte_end":90001,"line_start":1566,"line_end":1566,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                                        let key = args[4].clone();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1566:58\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let key = args[4].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":103167,"byte_end":103175,"line_start":1790,"line_end":1790,"column_start":49,"column_end":57,"is_primary":true,"text":[{"text":"                        let ip_address = args[1].clone();","highlight_start":49,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":103167,"byte_end":103175,"line_start":1790,"line_end":1790,"column_start":49,"column_end":57,"is_primary":true,"text":[{"text":"                        let ip_address = args[1].clone();","highlight_start":49,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1790:49\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1790\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let ip_address = args[1].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":103228,"byte_end":103236,"line_start":1791,"line_end":1791,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"                        let wildcard_mask = args[2].clone();","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":103228,"byte_end":103236,"line_start":1791,"line_end":1791,"column_start":52,"column_end":60,"is_primary":true,"text":[{"text":"                        let wildcard_mask = args[2].clone();","highlight_start":52,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1791:52\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1791\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let wildcard_mask = args[2].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":104541,"byte_end":104549,"line_start":1815,"line_end":1815,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"                        let cost = args[3].clone();","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":104541,"byte_end":104549,"line_start":1815,"line_end":1815,"column_start":43,"column_end":51,"is_primary":true,"text":[{"text":"                        let cost = args[3].clone();","highlight_start":43,"highlight_end":51}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1815:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1815\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let cost = args[3].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":111868,"byte_end":111876,"line_start":1954,"line_end":1954,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":111868,"byte_end":111876,"line_start":1954,"line_end":1954,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1954:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1954\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let ip_address = args[0].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":111925,"byte_end":111933,"line_start":1955,"line_end":1955,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":111925,"byte_end":111933,"line_start":1955,"line_end":1955,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1955:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1955\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let wildcard_mask = args[1].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":113098,"byte_end":113106,"line_start":1976,"line_end":1976,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":113098,"byte_end":113106,"line_start":1976,"line_end":1976,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1976:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1976\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let ip_address = args[0].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":113155,"byte_end":113163,"line_start":1977,"line_end":1977,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":113155,"byte_end":113163,"line_start":1977,"line_end":1977,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1977:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1977\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let wildcard_mask = args[1].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":114329,"byte_end":114337,"line_start":1998,"line_end":1998,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":114329,"byte_end":114337,"line_start":1998,"line_end":1998,"column_start":45,"column_end":53,"is_primary":true,"text":[{"text":"                    let ip_address = args[0].clone();","highlight_start":45,"highlight_end":53}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1998:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1998\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let ip_address = args[0].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":114386,"byte_end":114394,"line_start":1999,"line_end":1999,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":114386,"byte_end":114394,"line_start":1999,"line_end":1999,"column_start":48,"column_end":56,"is_primary":true,"text":[{"text":"                    let wildcard_mask = args[1].clone();","highlight_start":48,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:1999:48\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1999\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let wildcard_mask = args[1].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":115561,"byte_end":115569,"line_start":2021,"line_end":2021,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"                    let input = args[0].clone();","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":115561,"byte_end":115569,"line_start":2021,"line_end":2021,"column_start":40,"column_end":48,"is_primary":true,"text":[{"text":"                    let input = args[0].clone();","highlight_start":40,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2021:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let input = args[0].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":115973,"byte_end":115981,"line_start":2028,"line_end":2028,"column_start":59,"column_end":67,"is_primary":true,"text":[{"text":"                        rip_config.interfaces.insert(input.clone().to_string());","highlight_start":59,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":115973,"byte_end":115981,"line_start":2028,"line_end":2028,"column_start":59,"column_end":67,"is_primary":true,"text":[{"text":"                        rip_config.interfaces.insert(input.clone().to_string());","highlight_start":59,"highlight_end":67}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2028:59\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        rip_config.interfaces.insert(input.clone().to_string());\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"call to `.clone()` on a reference in this situation does nothing","code":{"code":"noop_method_call","explanation":null},"level":"warning","spans":[{"file_name":"src/clicommands.rs","byte_start":118994,"byte_end":119002,"line_start":2100,"line_end":2100,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"                let area_id = args[0].clone();","highlight_start":38,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this redundant call","code":null,"level":"help","spans":[{"file_name":"src/clicommands.rs","byte_start":118994,"byte_end":119002,"line_start":2100,"line_end":2100,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"                let area_id = args[0].clone();","highlight_start":38,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: call to `.clone()` on a reference in this situation does nothing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/clicommands.rs:2100:38\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let area_id = args[0].clone();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this redundant call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the type `str` does not implement `Clone`, so calling `clone` on `&str` copies the reference, which does not do anything and can be removed\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"51 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 51 warnings emitted\u001b[0m\n\n"}
